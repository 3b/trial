#|
 This file is a part of trial
 (c) 2016 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)
 Author: Nicolas Hafner <shinmera@tymoon.eu>
|#

(in-package #:org.shirakumo.fraf.trial)
(in-readtable :qtools)

(defun modelview-matrix ()
  (gl:get-double :modelview-matrix 16))

(defun projection-matrix ()
  (gl:get-double :projection-matrix 16))

(defun proj-matrix (camera)
  (with-pushed-matrix
    (setup-perspective camera (make-instance 'resize :width (width *context*)
                                                     :height (height *context*)))
    (projection-matrix)))

(defun view-matrix (camera)
  (with-pushed-matrix
    (project-view camera NIL)
    (modelview-matrix)))

(defun 4x4-4v-mult (matrix in)
  (let ((out (v4 0.0 0.0 0.0 0.0)))
    (dotimes (i 4 out)
      (setf (aref out i)
            (+ (* (aref in 0) (aref matrix (+ i (* 4 0))))
               (* (aref in 1) (aref matrix (+ i (* 4 1))))
               (* (aref in 2) (aref matrix (+ i (* 4 2))))
               (* (aref in 3) (aref matrix (+ i (* 4 3)))))))))

(defun 4x4-mult (a b)
  (let ((out (make-array (* 4 4))))
    (dotimes (i 4 out)
      (dotimes (j 4)
        (let ((total 0))
          (dotimes (k 4)
            (incf total (* (aref a (+ k (* i 4)))
                           (aref b (+ j (* k 4))))))
          (setf (aref out (+ (* i 4) j)) total))))))

;; Ported from MESA
(defun inv-4x4 (n)
  (let ((det 0)
        (inv (make-array (* 4 4))))
    (setf (aref inv 0)
          (+ (* (aref n 5) (aref n 10) (aref n 15))
             (- (* (aref n 5) (aref n 11) (aref n 14)))
             (- (* (aref n 9) (aref n 6) (aref n 15)))
             (* (aref n 9) (aref n 7) (aref n 14))
             (* (aref n 13) (aref n 6) (aref n 11))
             (- (* (aref n 13) (aref n 7) (aref n 10)))))

    (setf (aref inv 4)
          (+ (* (- (aref n 4)) (aref n 10) (aref n 15))
             (* (aref n 4) (aref n 11) (aref n 14))
             (* (aref n 8) (aref n 6) (aref n 15))
             (- (* (aref n 8) (aref n 7) (aref n 14)))
             (- (* (aref n 12) (aref n 6) (aref n 11)))
             (* (aref n 12) (aref n 7) (aref n 10))))

    (setf (aref inv 8)
          (+ (* (aref n 4) (aref n 9) (aref n 15))
             (- (* (aref n 4) (aref n 11) (aref n 13)))
             (- (* (aref n 8) (aref n 5) (aref n 15)))
             (* (aref n 8) (aref n 7) (aref n 13))
             (* (aref n 12) (aref n 5) (aref n 11))
             (- (* (aref n 12) (aref n 7) (aref n 9)))))

    (setf (aref inv 12)
          (+ (* (- (aref n 4)) (aref n 9) (aref n 14))
             (* (aref n 4) (aref n 10) (aref n 13))
             (* (aref n 8) (aref n 5) (aref n 14))
             (- (* (aref n 8) (aref n 6) (aref n 13)))
             (- (* (aref n 12) (aref n 5) (aref n 10)))
             (* (aref n 12) (aref n 6) (aref n 9))))

    (setf (aref inv 1)
          (+ (* (- (aref n 1)) (aref n 10) (aref n 15))
             (* (aref n 1) (aref n 11) (aref n 14))
             (* (aref n 9) (aref n 2) (aref n 15))
             (- (* (aref n 9) (aref n 3) (aref n 14)))
             (- (* (aref n 13) (aref n 2) (aref n 11)))
             (* (aref n 13) (aref n 3) (aref n 10))))

    (setf (aref inv 5)
          (+ (* (aref n 0) (aref n 10) (aref n 15))
             (- (* (aref n 0) (aref n 11) (aref n 14)))
             (- (* (aref n 8) (aref n 2) (aref n 15)))
             (* (aref n 8) (aref n 3) (aref n 14))
             (* (aref n 12) (aref n 2) (aref n 11))
             (- (* (aref n 12) (aref n 3) (aref n 10)))))

    (setf (aref inv 9)
          (+ (* (- (aref n 0)) (aref n 9) (aref n 15))
             (* (aref n 0) (aref n 11) (aref n 13))
             (* (aref n 8) (aref n 1) (aref n 15))
             (- (* (aref n 8) (aref n 3) (aref n 13)))
             (- (* (aref n 12) (aref n 1) (aref n 11)))
             (* (aref n 12) (aref n 3) (aref n 9))))

    (setf (aref inv 13)
          (+ (* (aref n 0) (aref n 9) (aref n 14))
             (- (* (aref n 0) (aref n 10) (aref n 13)))
             (- (* (aref n 8) (aref n 1) (aref n 14)))
             (* (aref n 8) (aref n 2) (aref n 13))
             (* (aref n 12) (aref n 1) (aref n 10))
             (- (* (aref n 12) (aref n 2) (aref n 9)))))

    (setf (aref inv 2)
          (+ (* (aref n 1) (aref n 6) (aref n 15))
             (- (* (aref n 1) (aref n 7) (aref n 14)))
             (- (* (aref n 5) (aref n 2) (aref n 15)))
             (* (aref n 5) (aref n 3) (aref n 14))
             (* (aref n 13) (aref n 2) (aref n 7))
             (- (* (aref n 13) (aref n 3) (aref n 6)))))

    (setf (aref inv 6)
          (+ (* (- (aref n 0)) (aref n 6) (aref n 15))
             (* (aref n 0) (aref n 7) (aref n 14))
             (* (aref n 4) (aref n 2) (aref n 15))
             (- (* (aref n 4) (aref n 3) (aref n 14)))
             (- (* (aref n 12) (aref n 2) (aref n 7)))
             (* (aref n 12) (aref n 3) (aref n 6))))

    (setf (aref inv 10)
          (+ (* (aref n 0) (aref n 5) (aref n 15))
             (- (* (aref n 0) (aref n 7) (aref n 13)))
             (- (* (aref n 4) (aref n 1) (aref n 15)))
             (* (aref n 4) (aref n 3) (aref n 13))
             (* (aref n 12) (aref n 1) (aref n 7))
             (- (* (aref n 12) (aref n 3) (aref n 5)))))

    (setf (aref inv 14)
          (+ (* (- (aref n 0)) (aref n 5) (aref n 14))
             (* (aref n 0) (aref n 6) (aref n 13))
             (* (aref n 4) (aref n 1) (aref n 14))
             (- (* (aref n 4) (aref n 2) (aref n 13)))
             (- (* (aref n 12) (aref n 1) (aref n 6)))
             (* (aref n 12) (aref n 2) (aref n 5))))

    (setf (aref inv 3)
          (+ (* (- (aref n 1)) (aref n 6) (aref n 11))
             (* (aref n 1) (aref n 7) (aref n 10))
             (* (aref n 5) (aref n 2) (aref n 11))
             (- (* (aref n 5) (aref n 3) (aref n 10)))
             (- (* (aref n 9) (aref n 2) (aref n 7)))
             (* (aref n 9) (aref n 3) (aref n 6))))

    (setf (aref inv 7)
          (+ (* (aref n 0) (aref n 6) (aref n 11))
             (- (* (aref n 0) (aref n 7) (aref n 10)))
             (- (* (aref n 4) (aref n 2) (aref n 11)))
             (* (aref n 4) (aref n 3) (aref n 10))
             (* (aref n 8) (aref n 2) (aref n 7))
             (- (* (aref n 8) (aref n 3) (aref n 6)))))

    (setf (aref inv 11)
          (+ (* (- (aref n 0)) (aref n 5) (aref n 11))
             (* (aref n 0) (aref n 7) (aref n 9))
             (* (aref n 4) (aref n 1) (aref n 11))
             (- (* (aref n 4) (aref n 3) (aref n 9)))
             (- (* (aref n 8) (aref n 1) (aref n 7)))
             (* (aref n 8) (aref n 3) (aref n 5))))

    (setf (aref inv 15)
          (+ (* (aref n 0) (aref n 5) (aref n 10))
             (- (* (aref n 0) (aref n 6) (aref n 9)))
             (- (* (aref n 4) (aref n 1) (aref n 10)))
             (* (aref n 4) (aref n 2) (aref n 9))
             (* (aref n 8) (aref n 1) (aref n 6))
             (- (* (aref n 8) (aref n 2) (aref n 5)))))

    (setf det (+ (* (aref n 0) (aref inv 0))
                 (* (aref n 1) (aref inv 4))
                 (* (aref n 2) (aref inv 8))
                 (* (aref n 3) (aref inv 12))))

    (let ((det (/ det)))
      (dotimes (i 16 inv)
        (setf (aref inv i) (* (aref inv i) det))))))

(defun vec->4v (vec)
  (v4 (vx vec) (vy vec) (vz vec) 1.0s0))

(defun 4v->vec (4v)
  (vec (aref 4v 0) (aref 4v 1) (aref 4v 2)))

(defun vec->screen (vec modelview projection width height)
  (let ((clip-pos (4x4-4v-mult projection (4x4-4v-mult modelview (vec->4v vec)))))
    (let ((w (aref clip-pos 3)))
      (if (= 0.0s0 w)
          (vec -1 -1 0)
          (let* ((norm-pos (nv+ (nv* (4v->vec clip-pos) (/ 0.5s0 w)) 0.5s0)))
            (vsetf norm-pos
                   (* width (vx norm-pos))
                   (* height (- 1 (vy norm-pos)))
                   0.0s0))))))

(defun screen->vec (vec modelview projection width height)
  (let ((x (1- (* 2 (/ (vx vec) width))))
        (y (1- (* 2 (/ (vy vec) height))))
        (inv (inv-4x4 (4x4-mult projection modelview))))
    (4v->vec (4x4-4v-mult inv (v4 x y 0 0)))))

(defun vec->main (vec main)
  (with-context (main)
    (vec->screen vec
                 (view-matrix (unit :camera (scene main)))
                 (proj-matrix (unit :camera (scene main)))
                 (q+:width main)
                 (q+:height main))))

(defun main->vec (vec main)
  (with-context (main)
    (screen->vec vec
                 (view-matrix (unit :camera (scene main)))
                 (proj-matrix (unit :camera (scene main)))
                 (q+:width main)
                 (q+:height main))))
